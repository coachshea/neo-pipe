*neopipe.txt*    Pass text shell command, see the results.

                     _   _ _____ ___  ____ ___ ____  _____ 
                    | \ | | ____/ _ \|  _ \_ _|  _ \| ____|
                    |  \| |  _|| | | | |_) | || |_) |  _|  
                    | |\  | |__| |_| |  __/| ||  __/| |___ 
                    |_| \_|_____\___/|_|  |___|_|   |_____|
                                                           


Author:  John Shea <coachshea@fastmail.com>

================================================================================
Contents

Introduction ............................. |neopipe-intro|
Configuration ............................ |neopipe-configuration|
  npipe_command .......................... |neopipe-npipe_com|
  npipe_filetype ......................... |neopipe-npipe_ft|
  npipe_split ............................ |neopipe-npipe_split|
Commands ................................. |neopipe-commands|
Pipe ................................... |neopipe-Pipe-command|
PipeNearest ............................ |neopipe-PipeNearest-command|
PipeClose .............................. |neopipe-PipeClose-command|
Examples ................................. |neopipe-examples|
About .................................... |neopipe-about|

===============================================================================
INTRODUCTION                                    *neopipe-intro*

neopipe sends the current buffer to a shell command, and instantly displays
the output.

===============================================================================
CONFIGURATION                                   *neoppipe-configuration*

*neopipe-pipe_command*

pipe_com                Required! Set this to any shell command that will take
the contents of your buffer on STDIN, and eturn the
result on STDOUT.

*neopipe-pipe_ft*

pipe_ft                 The filetype of the output buffer. Useful for syntax
highlighting of the result, or running arbitrary
autocommands against it.

*neopipe-pipe_search_start*

pipe_search_start       The regex to use to detemine the start of a code block
block. For use with the VimPipeNearest command. This
can be set on a buffer g:vimpipe_search_start or
global level, with the buffer level having precedence

*neopipe-pipe_search_end*

pipe_search_end         The regex to use to determine the end of a code block.
For use with the VimPipeNearest Command. This can be
set on a buffer or global level, with the buffer level
having precedence

*neopipe-pipe_start_adjust*
*neopipe-pipe_end_adjust*

pipe_start_adjust       By default, PipeNearest will include the lines that match
pipe_end_adjust         pipe_search_start and pipe_search_end, but this is configurable
through pipe_start_adjust and pipe_end_adjust. To discard
the first line of the upward (start) search simply set
pipe_search_start to 1. To discard the downward (end) match,
                  set pipe_search_end to -1.

                  ===============================================================================
                  COMMANDS                                        *neopipe-commands*

                  VimPipe offers three commands.

                  *neopipe-Pipe-command*

Pipe                   Send the selected contents (entire buffer by defualt)
  through the command specified by |neopipe-pipe_command|
  and displays the results. The buffer does not need to be
  saved first.

  *neopipe-PipeNearest-command*

  PipeNearest            Run the nearest code block based on the value of
  |neopipe-pipe_search_start| and |vim-pipe-pipe_search_end|
  through the command specified by |neopipe-pipe_command|

  *neopipe-PipeClose-command*

  PipeClose              Close the scratch buffer.

  ===============================================================================
  EXAMPLES                                         *neopipe-examples*

  The following are possible configurations. These can be set globally or on a
  per-project bases:

  // compile livescript
  "*.ls": {
    "pipe_com": "lsc -cbp",
    "pipe_ft": "javascript"
  }

// compile jade to javascript
"src/*.jade": {
  "pipe_com": "jade -c",
  "pipe_ft": "javascript"
}

// compile jade to html
"views/*.jade": {
  "pipe_com": "jade -P",
  "pipe_ft": "html"
}

// connect to a mongodb instance
"*.mongo": {
  "pipe_com": "mongo db/test.db",
    "pipe_ft": "javascript"
}

// connect to a mongodb instance with livescript
"*.mongo": {
  "pipe_com": "lsc -cpb | mongo",
    "pipe_ft": "javascript"
}

// view assembly for c files
"*.c": {
  "pipe_com": "gcc -S -xc -c -o - -",
    "pipe_ft": "asm"
}

// connect to a sqlite3 database with comments
"db/*.sql": {
  "pipe_com": "sqlite2 ~/mydata.db",
    "pip_search_start": "^\#"
      "pipe_start_adjust": 1
}

===============================================================================
ABOUT                                           *neopipe-about*

Grab the latest version or report a bug on GitHub:

http://github.com/coachshea/neopipe

vim:tw=78:et:ft=help:norl:
